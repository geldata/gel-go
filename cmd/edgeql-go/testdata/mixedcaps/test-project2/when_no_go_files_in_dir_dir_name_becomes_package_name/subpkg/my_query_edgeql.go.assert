// Code generated by github.com/geldata/gel-go/cmd/edgeql-go DO NOT EDIT.

package zzz

import (
	"context"
	_ "embed"
	"math/big"
	"time"

	"github.com/geldata/gel-go/geltypes"
)

//go:embed my_query.edgeql
var myQueryCmd string

// myQueryResult
// is part of the return type for
// myQuery()
type myQueryResult struct {
	A  geltypes.UUID                       `gel:"a"`
	B  geltypes.OptionalUUID               `gel:"b"`
	C  string                              `gel:"c"`
	D  geltypes.OptionalStr                `gel:"d"`
	E  []byte                              `gel:"e"`
	F  geltypes.OptionalBytes              `gel:"f"`
	G  int16                               `gel:"g"`
	H  geltypes.OptionalInt16              `gel:"h"`
	I  int32                               `gel:"i"`
	J  geltypes.OptionalInt32              `gel:"j"`
	K  int64                               `gel:"k"`
	L  geltypes.OptionalInt64              `gel:"l"`
	M  float32                             `gel:"m"`
	N  geltypes.OptionalFloat32            `gel:"n"`
	O  float64                             `gel:"o"`
	P  geltypes.OptionalFloat64            `gel:"p"`
	Q  bool                                `gel:"q"`
	R  geltypes.OptionalBool               `gel:"r"`
	S  time.Time                           `gel:"s"`
	T  geltypes.OptionalDateTime           `gel:"t"`
	U  geltypes.LocalDateTime              `gel:"u"`
	V  geltypes.OptionalLocalDateTime      `gel:"v"`
	W  geltypes.LocalDate                  `gel:"w"`
	X  geltypes.OptionalLocalDate          `gel:"x"`
	Y  geltypes.LocalTime                  `gel:"y"`
	Z  geltypes.OptionalLocalTime          `gel:"z"`
	Aa geltypes.Duration                   `gel:"aa"`
	Ab geltypes.OptionalDuration           `gel:"ab"`
	Ac *big.Int                            `gel:"ac"`
	Ad geltypes.OptionalBigInt             `gel:"ad"`
	Ae geltypes.RelativeDuration           `gel:"ae"`
	Af geltypes.OptionalRelativeDuration   `gel:"af"`
	Ag geltypes.DateDuration               `gel:"ag"`
	Ah geltypes.OptionalDateDuration       `gel:"ah"`
	Ai geltypes.Memory                     `gel:"ai"`
	Aj geltypes.OptionalMemory             `gel:"aj"`
	Ak geltypes.RangeInt32                 `gel:"ak"`
	Al geltypes.OptionalRangeInt32         `gel:"al"`
	Am geltypes.RangeInt64                 `gel:"am"`
	An geltypes.OptionalRangeInt64         `gel:"an"`
	Ao geltypes.RangeFloat32               `gel:"ao"`
	Ap geltypes.OptionalRangeFloat32       `gel:"ap"`
	Aq geltypes.RangeFloat64               `gel:"aq"`
	Ar geltypes.OptionalRangeFloat64       `gel:"ar"`
	As geltypes.RangeDateTime              `gel:"as"`
	At geltypes.OptionalRangeDateTime      `gel:"at"`
	Au geltypes.RangeLocalDateTime         `gel:"au"`
	Av geltypes.OptionalRangeLocalDateTime `gel:"av"`
	Aw geltypes.RangeLocalDate             `gel:"aw"`
	Ax geltypes.OptionalRangeLocalDate     `gel:"ax"`
	Ay int64                               `gel:"ay"`
	Az geltypes.OptionalInt64              `gel:"az"`
	Ba string                              `gel:"ba"`
	Bb geltypes.OptionalStr                `gel:"bb"`
}

// myQuery
// runs the query found in
// my_query.edgeql
func myQuery(
	ctx context.Context,
	client geltypes.Executor,
	A geltypes.UUID,
	B geltypes.OptionalUUID,
	C string,
	D geltypes.OptionalStr,
	E []byte,
	F geltypes.OptionalBytes,
	G int16,
	H geltypes.OptionalInt16,
	I int32,
	J geltypes.OptionalInt32,
	K int64,
	L geltypes.OptionalInt64,
	M float32,
	N geltypes.OptionalFloat32,
	O float64,
	P geltypes.OptionalFloat64,
	Q bool,
	R geltypes.OptionalBool,
	S time.Time,
	T geltypes.OptionalDateTime,
	U geltypes.LocalDateTime,
	V geltypes.OptionalLocalDateTime,
	W geltypes.LocalDate,
	X geltypes.OptionalLocalDate,
	Y geltypes.LocalTime,
	Z geltypes.OptionalLocalTime,
	Aa geltypes.Duration,
	Ab geltypes.OptionalDuration,
	Ac *big.Int,
	Ad geltypes.OptionalBigInt,
	Ae geltypes.RelativeDuration,
	Af geltypes.OptionalRelativeDuration,
	Ag geltypes.DateDuration,
	Ah geltypes.OptionalDateDuration,
	Ai geltypes.Memory,
	Aj geltypes.OptionalMemory,
	Ak geltypes.RangeInt32,
	Al geltypes.OptionalRangeInt32,
	Am geltypes.RangeInt64,
	An geltypes.OptionalRangeInt64,
	Ao geltypes.RangeFloat32,
	Ap geltypes.OptionalRangeFloat32,
	Aq geltypes.RangeFloat64,
	Ar geltypes.OptionalRangeFloat64,
	As geltypes.RangeDateTime,
	At geltypes.OptionalRangeDateTime,
	Au geltypes.RangeLocalDateTime,
	Av geltypes.OptionalRangeLocalDateTime,
	Aw geltypes.RangeLocalDate,
	Ax geltypes.OptionalRangeLocalDate,
) (myQueryResult, error) {
	var result myQueryResult

	err := client.QuerySingle(
		ctx,
		myQueryCmd,
		&result,
		map[string]interface{}{
			"a":  A,
			"b":  B,
			"c":  C,
			"d":  D,
			"e":  E,
			"f":  F,
			"g":  G,
			"h":  H,
			"i":  I,
			"j":  J,
			"k":  K,
			"l":  L,
			"m":  M,
			"n":  N,
			"o":  O,
			"p":  P,
			"q":  Q,
			"r":  R,
			"s":  S,
			"t":  T,
			"u":  U,
			"v":  V,
			"w":  W,
			"x":  X,
			"y":  Y,
			"z":  Z,
			"aa": Aa,
			"ab": Ab,
			"ac": Ac,
			"ad": Ad,
			"ae": Ae,
			"af": Af,
			"ag": Ag,
			"ah": Ah,
			"ai": Ai,
			"aj": Aj,
			"ak": Ak,
			"al": Al,
			"am": Am,
			"an": An,
			"ao": Ao,
			"ap": Ap,
			"aq": Aq,
			"ar": Ar,
			"as": As,
			"at": At,
			"au": Au,
			"av": Av,
			"aw": Aw,
			"ax": Ax,
		},
	)

	return result, err
}

// myQueryJSON
// runs the query found in
// my_query.edgeql
// returning the results as json encoded bytes
func myQueryJSON(
	ctx context.Context,
	client geltypes.Executor,
	A geltypes.UUID,
	B geltypes.OptionalUUID,
	C string,
	D geltypes.OptionalStr,
	E []byte,
	F geltypes.OptionalBytes,
	G int16,
	H geltypes.OptionalInt16,
	I int32,
	J geltypes.OptionalInt32,
	K int64,
	L geltypes.OptionalInt64,
	M float32,
	N geltypes.OptionalFloat32,
	O float64,
	P geltypes.OptionalFloat64,
	Q bool,
	R geltypes.OptionalBool,
	S time.Time,
	T geltypes.OptionalDateTime,
	U geltypes.LocalDateTime,
	V geltypes.OptionalLocalDateTime,
	W geltypes.LocalDate,
	X geltypes.OptionalLocalDate,
	Y geltypes.LocalTime,
	Z geltypes.OptionalLocalTime,
	Aa geltypes.Duration,
	Ab geltypes.OptionalDuration,
	Ac *big.Int,
	Ad geltypes.OptionalBigInt,
	Ae geltypes.RelativeDuration,
	Af geltypes.OptionalRelativeDuration,
	Ag geltypes.DateDuration,
	Ah geltypes.OptionalDateDuration,
	Ai geltypes.Memory,
	Aj geltypes.OptionalMemory,
	Ak geltypes.RangeInt32,
	Al geltypes.OptionalRangeInt32,
	Am geltypes.RangeInt64,
	An geltypes.OptionalRangeInt64,
	Ao geltypes.RangeFloat32,
	Ap geltypes.OptionalRangeFloat32,
	Aq geltypes.RangeFloat64,
	Ar geltypes.OptionalRangeFloat64,
	As geltypes.RangeDateTime,
	At geltypes.OptionalRangeDateTime,
	Au geltypes.RangeLocalDateTime,
	Av geltypes.OptionalRangeLocalDateTime,
	Aw geltypes.RangeLocalDate,
	Ax geltypes.OptionalRangeLocalDate,
) ([]byte, error) {
	var result []byte

	err := client.QuerySingleJSON(
		ctx,
		myQueryCmd,
		&result,
		map[string]interface{}{
			"a":  A,
			"b":  B,
			"c":  C,
			"d":  D,
			"e":  E,
			"f":  F,
			"g":  G,
			"h":  H,
			"i":  I,
			"j":  J,
			"k":  K,
			"l":  L,
			"m":  M,
			"n":  N,
			"o":  O,
			"p":  P,
			"q":  Q,
			"r":  R,
			"s":  S,
			"t":  T,
			"u":  U,
			"v":  V,
			"w":  W,
			"x":  X,
			"y":  Y,
			"z":  Z,
			"aa": Aa,
			"ab": Ab,
			"ac": Ac,
			"ad": Ad,
			"ae": Ae,
			"af": Af,
			"ag": Ag,
			"ah": Ah,
			"ai": Ai,
			"aj": Aj,
			"ak": Ak,
			"al": Al,
			"am": Am,
			"an": An,
			"ao": Ao,
			"ap": Ap,
			"aq": Aq,
			"ar": Ar,
			"as": As,
			"at": At,
			"au": Au,
			"av": Av,
			"aw": Aw,
			"ax": Ax,
		},
	)
	if err != nil {
		return nil, err
	}

	return result, nil
}
