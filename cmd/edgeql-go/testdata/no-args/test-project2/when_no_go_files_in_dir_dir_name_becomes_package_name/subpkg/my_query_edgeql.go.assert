// Code generated by github.com/geldata/gel-go/cmd/edgeql-go DO NOT EDIT.

package zzz

import (
	"context"
	_ "embed"
	"math/big"
	"time"

	"github.com/geldata/gel-go/geltypes"
)

//go:embed my_query.edgeql
var myQueryCmd string

// myQueryResult
// is part of the return type for
// myQuery()
type myQueryResult struct {
	a  geltypes.UUID                       `gel:"a"`
	b  geltypes.OptionalUUID               `gel:"b"`
	c  string                              `gel:"c"`
	d  geltypes.OptionalStr                `gel:"d"`
	e  []byte                              `gel:"e"`
	f  geltypes.OptionalBytes              `gel:"f"`
	g  int16                               `gel:"g"`
	h  geltypes.OptionalInt16              `gel:"h"`
	i  int32                               `gel:"i"`
	j  geltypes.OptionalInt32              `gel:"j"`
	k  int64                               `gel:"k"`
	l  geltypes.OptionalInt64              `gel:"l"`
	m  float32                             `gel:"m"`
	n  geltypes.OptionalFloat32            `gel:"n"`
	o  float64                             `gel:"o"`
	p  geltypes.OptionalFloat64            `gel:"p"`
	q  bool                                `gel:"q"`
	r  geltypes.OptionalBool               `gel:"r"`
	s  time.Time                           `gel:"s"`
	t  geltypes.OptionalDateTime           `gel:"t"`
	u  geltypes.LocalDateTime              `gel:"u"`
	v  geltypes.OptionalLocalDateTime      `gel:"v"`
	w  geltypes.LocalDate                  `gel:"w"`
	x  geltypes.OptionalLocalDate          `gel:"x"`
	y  geltypes.LocalTime                  `gel:"y"`
	z  geltypes.OptionalLocalTime          `gel:"z"`
	aa geltypes.Duration                   `gel:"aa"`
	ab geltypes.OptionalDuration           `gel:"ab"`
	ac *big.Int                            `gel:"ac"`
	ad geltypes.OptionalBigInt             `gel:"ad"`
	ae geltypes.RelativeDuration           `gel:"ae"`
	af geltypes.OptionalRelativeDuration   `gel:"af"`
	ag geltypes.DateDuration               `gel:"ag"`
	ah geltypes.OptionalDateDuration       `gel:"ah"`
	ai geltypes.Memory                     `gel:"ai"`
	aj geltypes.OptionalMemory             `gel:"aj"`
	ak geltypes.RangeInt32                 `gel:"ak"`
	al geltypes.OptionalRangeInt32         `gel:"al"`
	am geltypes.RangeInt64                 `gel:"am"`
	an geltypes.OptionalRangeInt64         `gel:"an"`
	ao geltypes.RangeFloat32               `gel:"ao"`
	ap geltypes.OptionalRangeFloat32       `gel:"ap"`
	aq geltypes.RangeFloat64               `gel:"aq"`
	ar geltypes.OptionalRangeFloat64       `gel:"ar"`
	as geltypes.RangeDateTime              `gel:"as"`
	at geltypes.OptionalRangeDateTime      `gel:"at"`
	au geltypes.RangeLocalDateTime         `gel:"au"`
	av geltypes.OptionalRangeLocalDateTime `gel:"av"`
	aw geltypes.RangeLocalDate             `gel:"aw"`
	ax geltypes.OptionalRangeLocalDate     `gel:"ax"`
	ay int64                               `gel:"ay"`
	az geltypes.OptionalInt64              `gel:"az"`
	ba string                              `gel:"ba"`
	bb geltypes.OptionalStr                `gel:"bb"`
}

// myQuery
// runs the query found in
// my_query.edgeql
func myQuery(
	ctx context.Context,
	client geltypes.Executor,
	a geltypes.UUID,
	b geltypes.OptionalUUID,
	c string,
	d geltypes.OptionalStr,
	e []byte,
	f geltypes.OptionalBytes,
	g int16,
	h geltypes.OptionalInt16,
	i int32,
	j geltypes.OptionalInt32,
	k int64,
	l geltypes.OptionalInt64,
	m float32,
	n geltypes.OptionalFloat32,
	o float64,
	p geltypes.OptionalFloat64,
	q bool,
	r geltypes.OptionalBool,
	s time.Time,
	t geltypes.OptionalDateTime,
	u geltypes.LocalDateTime,
	v geltypes.OptionalLocalDateTime,
	w geltypes.LocalDate,
	x geltypes.OptionalLocalDate,
	y geltypes.LocalTime,
	z geltypes.OptionalLocalTime,
	aa geltypes.Duration,
	ab geltypes.OptionalDuration,
	ac *big.Int,
	ad geltypes.OptionalBigInt,
	ae geltypes.RelativeDuration,
	af geltypes.OptionalRelativeDuration,
	ag geltypes.DateDuration,
	ah geltypes.OptionalDateDuration,
	ai geltypes.Memory,
	aj geltypes.OptionalMemory,
	ak geltypes.RangeInt32,
	al geltypes.OptionalRangeInt32,
	am geltypes.RangeInt64,
	an geltypes.OptionalRangeInt64,
	ao geltypes.RangeFloat32,
	ap geltypes.OptionalRangeFloat32,
	aq geltypes.RangeFloat64,
	ar geltypes.OptionalRangeFloat64,
	as geltypes.RangeDateTime,
	at geltypes.OptionalRangeDateTime,
	au geltypes.RangeLocalDateTime,
	av geltypes.OptionalRangeLocalDateTime,
	aw geltypes.RangeLocalDate,
	ax geltypes.OptionalRangeLocalDate,
) (myQueryResult, error) {
	var result myQueryResult

	err := client.QuerySingle(
		ctx,
		myQueryCmd,
		&result,
		map[string]interface{}{
			"a":  a,
			"b":  b,
			"c":  c,
			"d":  d,
			"e":  e,
			"f":  f,
			"g":  g,
			"h":  h,
			"i":  i,
			"j":  j,
			"k":  k,
			"l":  l,
			"m":  m,
			"n":  n,
			"o":  o,
			"p":  p,
			"q":  q,
			"r":  r,
			"s":  s,
			"t":  t,
			"u":  u,
			"v":  v,
			"w":  w,
			"x":  x,
			"y":  y,
			"z":  z,
			"aa": aa,
			"ab": ab,
			"ac": ac,
			"ad": ad,
			"ae": ae,
			"af": af,
			"ag": ag,
			"ah": ah,
			"ai": ai,
			"aj": aj,
			"ak": ak,
			"al": al,
			"am": am,
			"an": an,
			"ao": ao,
			"ap": ap,
			"aq": aq,
			"ar": ar,
			"as": as,
			"at": at,
			"au": au,
			"av": av,
			"aw": aw,
			"ax": ax,
		},
	)

	return result, err
}

// myQueryJSON
// runs the query found in
// my_query.edgeql
// returning the results as json encoded bytes
func myQueryJSON(
	ctx context.Context,
	client geltypes.Executor,
	a geltypes.UUID,
	b geltypes.OptionalUUID,
	c string,
	d geltypes.OptionalStr,
	e []byte,
	f geltypes.OptionalBytes,
	g int16,
	h geltypes.OptionalInt16,
	i int32,
	j geltypes.OptionalInt32,
	k int64,
	l geltypes.OptionalInt64,
	m float32,
	n geltypes.OptionalFloat32,
	o float64,
	p geltypes.OptionalFloat64,
	q bool,
	r geltypes.OptionalBool,
	s time.Time,
	t geltypes.OptionalDateTime,
	u geltypes.LocalDateTime,
	v geltypes.OptionalLocalDateTime,
	w geltypes.LocalDate,
	x geltypes.OptionalLocalDate,
	y geltypes.LocalTime,
	z geltypes.OptionalLocalTime,
	aa geltypes.Duration,
	ab geltypes.OptionalDuration,
	ac *big.Int,
	ad geltypes.OptionalBigInt,
	ae geltypes.RelativeDuration,
	af geltypes.OptionalRelativeDuration,
	ag geltypes.DateDuration,
	ah geltypes.OptionalDateDuration,
	ai geltypes.Memory,
	aj geltypes.OptionalMemory,
	ak geltypes.RangeInt32,
	al geltypes.OptionalRangeInt32,
	am geltypes.RangeInt64,
	an geltypes.OptionalRangeInt64,
	ao geltypes.RangeFloat32,
	ap geltypes.OptionalRangeFloat32,
	aq geltypes.RangeFloat64,
	ar geltypes.OptionalRangeFloat64,
	as geltypes.RangeDateTime,
	at geltypes.OptionalRangeDateTime,
	au geltypes.RangeLocalDateTime,
	av geltypes.OptionalRangeLocalDateTime,
	aw geltypes.RangeLocalDate,
	ax geltypes.OptionalRangeLocalDate,
) ([]byte, error) {
	var result []byte

	err := client.QuerySingleJSON(
		ctx,
		myQueryCmd,
		&result,
		map[string]interface{}{
			"a":  a,
			"b":  b,
			"c":  c,
			"d":  d,
			"e":  e,
			"f":  f,
			"g":  g,
			"h":  h,
			"i":  i,
			"j":  j,
			"k":  k,
			"l":  l,
			"m":  m,
			"n":  n,
			"o":  o,
			"p":  p,
			"q":  q,
			"r":  r,
			"s":  s,
			"t":  t,
			"u":  u,
			"v":  v,
			"w":  w,
			"x":  x,
			"y":  y,
			"z":  z,
			"aa": aa,
			"ab": ab,
			"ac": ac,
			"ad": ad,
			"ae": ae,
			"af": af,
			"ag": ag,
			"ah": ah,
			"ai": ai,
			"aj": aj,
			"ak": ak,
			"al": al,
			"am": am,
			"an": an,
			"ao": ao,
			"ap": ap,
			"aq": aq,
			"ar": ar,
			"as": as,
			"at": at,
			"au": au,
			"av": av,
			"aw": aw,
			"ax": ax,
		},
	)
	if err != nil {
		return nil, err
	}

	return result, nil
}
