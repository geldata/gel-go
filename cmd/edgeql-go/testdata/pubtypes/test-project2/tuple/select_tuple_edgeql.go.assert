// Code generated by github.com/geldata/gel-go/cmd/edgeql-go DO NOT EDIT.

package tuple

import (
	"context"
	_ "embed"

	"github.com/geldata/gel-go/geltypes"
)

//go:embed select_tuple.edgeql
var selectTupleCmd string

// SelectTupleResult
// is part of the return type for
// selectTuple()
type SelectTupleResult struct {
	Element0 geltypes.OptionalStr   `gel:"0"`
	Element1 geltypes.OptionalInt64 `gel:"1"`
	Element2 SelectTupleResult2Item `gel:"2"`
}

// SelectTupleResult2Item
// is part of the return type for
// selectTuple()
type SelectTupleResult2Item struct {
	geltypes.Optional
	Element0 geltypes.OptionalStr   `gel:"0"`
	Element1 geltypes.OptionalInt64 `gel:"1"`
}

// selectTuple
// runs the query found in
// select_tuple.edgeql
func selectTuple(
	ctx context.Context,
	client geltypes.Executor,
) (SelectTupleResult, error) {
	var result SelectTupleResult

	err := client.QuerySingle(
		ctx,
		selectTupleCmd,
		&result,
	)

	return result, err
}

// selectTupleJSON
// runs the query found in
// select_tuple.edgeql
// returning the results as json encoded bytes
func selectTupleJSON(
	ctx context.Context,
	client geltypes.Executor,
) ([]byte, error) {
	var result []byte

	err := client.QuerySingleJSON(
		ctx,
		selectTupleCmd,
		&result,
	)
	if err != nil {
		return nil, err
	}

	return result, nil
}
