// Code generated by github.com/geldata/gel-go/cmd/edgeql-go DO NOT EDIT.

package main

import (
	"context"
	_ "embed"
	"encoding/json"

	gel "github.com/geldata/gel-go"
	"github.com/geldata/gel-go/geltypes"
)

//go:embed json_query.edgeql
var jsonQueryCmd string

// jsonQueryResult
// is part of the return type for
// jsonQuery()
type jsonQueryResult struct {
	Bytes         []byte                 `gel:"Bytes"`
	OptionalBytes geltypes.OptionalBytes `gel:"OptionalBytes"`
	Json          json.RawMessage        `gel:"Json"`
	OptionalJson  geltypes.OptionalBytes `gel:"OptionalJson"`
}

// jsonQuery
// runs the query found in
// json_query.edgeql
func jsonQuery(
	ctx context.Context,
	client *gel.Client,
	bytes []byte,
	optional_bytes geltypes.OptionalBytes,
	json []byte,
	optional_json geltypes.OptionalBytes,
) (jsonQueryResult, error) {
	var result jsonQueryResult

	err := client.QuerySingle(
		ctx,
		jsonQueryCmd,
		&result,
		map[string]interface{}{
			"bytes":          bytes,
			"optional_bytes": optional_bytes,
			"json":           json,
			"optional_json":  optional_json,
		},
	)

	return result, err
}

// jsonQueryJSON
// runs the query found in
// json_query.edgeql
// returning the results as json encoded bytes
func jsonQueryJSON(
	ctx context.Context,
	client *gel.Client,
	bytes []byte,
	optional_bytes geltypes.OptionalBytes,
	json []byte,
	optional_json geltypes.OptionalBytes,
) ([]byte, error) {
	var result []byte

	err := client.QuerySingleJSON(
		ctx,
		jsonQueryCmd,
		&result,
		map[string]interface{}{
			"bytes":          bytes,
			"optional_bytes": optional_bytes,
			"json":           json,
			"optional_json":  optional_json,
		},
	)
	if err != nil {
		return nil, err
	}

	return result, nil
}
