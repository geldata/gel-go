// Code generated by github.com/geldata/gel-go/cmd/edgeql-go DO NOT EDIT.

package main

import (
	"context"
	_ "embed"
	"encoding/json"

	"github.com/geldata/gel-go/geltypes"
)

//go:embed json_field.edgeql
var jsonFieldCmd string

// jsonFieldResult
// is part of the return type for
// jsonField()
type jsonFieldResult struct {
	Bytes         []byte                 `gel:"Bytes"`
	OptionalBytes geltypes.OptionalBytes `gel:"OptionalBytes"`
	Json          json.RawMessage        `gel:"Json"`
	OptionalJson  geltypes.OptionalBytes `gel:"OptionalJson"`
}

// jsonField
// runs the query found in
// json_field.edgeql
func jsonField(
	ctx context.Context,
	client geltypes.Executor,
	bytes []byte,
	optional_bytes geltypes.OptionalBytes,
	json []byte,
	optional_json geltypes.OptionalBytes,
) (jsonFieldResult, error) {
	var result jsonFieldResult

	err := client.QuerySingle(
		ctx,
		jsonFieldCmd,
		&result,
		map[string]interface{}{
			"bytes":          bytes,
			"optional_bytes": optional_bytes,
			"json":           json,
			"optional_json":  optional_json,
		},
	)

	return result, err
}

// jsonFieldJSON
// runs the query found in
// json_field.edgeql
// returning the results as json encoded bytes
func jsonFieldJSON(
	ctx context.Context,
	client geltypes.Executor,
	bytes []byte,
	optional_bytes geltypes.OptionalBytes,
	json []byte,
	optional_json geltypes.OptionalBytes,
) ([]byte, error) {
	var result []byte

	err := client.QuerySingleJSON(
		ctx,
		jsonFieldCmd,
		&result,
		map[string]interface{}{
			"bytes":          bytes,
			"optional_bytes": optional_bytes,
			"json":           json,
			"optional_json":  optional_json,
		},
	)
	if err != nil {
		return nil, err
	}

	return result, nil
}
